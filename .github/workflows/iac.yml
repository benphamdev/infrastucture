name: Deploy Glue Job

on:
  push:
    branches:
      - main
    paths:
      - "platform/code/scripts/**/*"
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  CODE_SCRIPTS: platform/code/scripts
  # S3 bucket prefixes for different environments
  S3_BUCKET_ASSETS_RND: "harmony-assets-rnd-s3-v1"
  S3_BUCKET_ASSETS_DEV: "harmony-assets-dev-s3-v1"
  S3_BUCKET_ASSETS_QA: "harmony-assets-qa-s3-v1"
  S3_BUCKET_ASSETS_PRD: "harmony-assets-prd-s3-v1"
  # Role name to assume in each environment
  AWS_ASSUME_ROLE_RND: "arn:aws:iam::787587782904:role/HarmonyGlueDeploymentRole"
  AWS_ASSUME_ROLE_DEV: "arn:aws:iam::787587782904:role/HarmonyGlueDeploymentRole"
  AWS_ASSUME_ROLE_QA: "arn:aws:iam::787587782904:role/HarmonyGlueDeploymentRole"
  AWS_ASSUME_ROLE_PRD: "arn:aws:iam::787587782904:role/HarmonyGlueDeploymentRole"

jobs:
  build-artifact:
    name: Build Glue Job Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      # - name: Set Environment (workflow_dispatch)
      #   if: github.event_name == 'workflow_dispatch'
      #   run: |
      #     echo "DEPLOY_ENV=${{ inputs.environment }}" >> $GITHUB_ENV
      #     echo "Selected environment: ${{ inputs.environment }}"
      # - name: Set Environment (push/PR)
      #   if: github.event_name == 'push' || github.event_name == 'pull_request'
      #   run: |
      #     # Default to 'rnd' for pushes/PRs unless specified
      #     echo "DEPLOY_ENV=rnd" >> $GITHUB_ENV
      #     echo "Selected default environment: rnd"
      # - name: Package Glue Jobs
      #   run: |
      #     cd ${GITHUB_WORKSPACE}
      #     echo "Preparing Glue jobs from ${GITHUB_WORKSPACE}/${CODE_SCRIPTS}"
      #     ls -la ${GITHUB_WORKSPACE}/${CODE_SCRIPTS}

      - name: Publish Glue Job Artifact
        uses: actions/upload-artifact@v4
        with:
          name: glue-job-artifact
          path: ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
          overwrite: true

  # deploy-to-rnd:
  #   name: Deploy Glue Job to RND
  #   needs: build-artifact
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' && (github.ref == 'refs/heads/main') }}
  #   env:
  #     ENVIRONMENT: rnd
  #   steps:
  #     - name: Set environment-specific variables
  #       run: |
  #         echo "S3_BUCKET=${{ env.S3_BUCKET_ASSETS_RND }}" >> $GITHUB_ENV
  #         echo "ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
  #         echo "ROLE_ARN=${{ env.AWS_ASSUME_ROLE_RND }}" >> $GITHUB_ENV

  #     # - name: Check if should run
  #     #   id: should_run
  #     #   run: |
  #     #     # For workflow_dispatch, only run for the selected environment
  #     #     if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
  #     #       if [ "${{ inputs.environment }}" == "${{ env.ENVIRONMENT }}" ]; then
  #     #         echo "Run this job for ${{ env.ENVIRONMENT }}"
  #     #         echo "run=true" >> $GITHUB_OUTPUT
  #     #       else
  #     #         echo "Skip job for ${{ env.ENVIRONMENT }}"
  #     #         echo "run=false" >> $GITHUB_OUTPUT
  #     #       fi
  #     #     else
  #     #       # For automated push to dev/staging, run for all environments
  #     #       echo "Run this job for ${{ env.ENVIRONMENT }}"
  #     #       echo "run=true" >> $GITHUB_OUTPUT
  #     #     fi

  #     # - name: Checkout Repository
  #     #   if: ${{ steps.should_run.outputs.run == 'true' }}
  #     #   uses: actions/checkout@v4
  #     #   with:
  #     #     clean: true

  #     - name: Configure AWS Credentials
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Assume AWS Role for ${{ env.ENVIRONMENT }}
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  #         role-to-assume: ${{ env.ROLE_ARN }}
  #         role-session-name: HarmonyGlueDeployment-${{ env.ENVIRONMENT }}
  #         role-duration-seconds: 3600

  #     - name: Verify AWS Identity After Role Assumption
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       run: |
  #         echo "Verifying AWS identity after role assumption"
  #         aws sts get-caller-identity
  #         echo "Testing S3 access"
  #         aws s3 ls ${{ env.S3_BUCKET }} || echo "Warning: S3 bucket access test failed"

  #     - name: Download Glue Job Artifact
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: glue-job-artifact
  #         path: ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}

  #     - name: Extract Artifacts
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       run: |
  #         mkdir -p ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
  #         cd ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
  #         ls -R
  #     - name: Deploy Glue Jobs to S3
  #       # if: ${{ steps.should_run.outputs.run == 'true' }}
  #       run: |
  #         echo "Deploying Glue Jobs to ${{ env.ENVIRONMENT }} environment (Account: ${{ env.ACCOUNT_ID }})"
  #         aws s3 sync ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}/ ${{ env.S3_BUCKET }}/scripts/ --delete

  deploy-to-dev:
    name: Deploy Glue Job to DEV
    # needs: deploy-to-rnd
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' && (github.ref == 'refs/heads/main') }}
    env:
      ENVIRONMENT: dev
    steps:
      - name: Set environment-specific variables
        run: |
          echo "S3_BUCKET=${{ env.S3_BUCKET_ASSETS_DEV }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "ROLE_ARN=${{ env.AWS_ASSUME_ROLE_DEV }}" >> $GITHUB_ENV

      # - name: Check if should run
      #   id: should_run
      #   run: |
      #     # For workflow_dispatch, only run for the selected environment
      #     if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
      #       if [ "${{ inputs.environment }}" == "${{ env.ENVIRONMENT }}" ]; then
      #         echo "Run this job for ${{ env.ENVIRONMENT }}"
      #         echo "run=true" >> $GITHUB_OUTPUT
      #       else
      #         echo "Skip job for ${{ env.ENVIRONMENT }}"
      #         echo "run=false" >> $GITHUB_OUTPUT
      #       fi
      #     else
      #       # For automated push to dev/staging, run for all environments
      #       echo "Run this job for ${{ env.ENVIRONMENT }}"
      #       echo "run=true" >> $GITHUB_OUTPUT
      #     fi

      - name: Checkout Repository
        #if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Configure AWS Credentials
        #    if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume AWS Role for ${{ env.ENVIRONMENT }}
        # if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: HarmonyGlueDeployment-${{ env.ENVIRONMENT }}
          role-duration-seconds: 3600

      - name: Verify AWS Identity After Role Assumption
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Verifying AWS identity after role assumption"
          aws sts get-caller-identity
          echo "Testing S3 access"
          aws s3 ls ${{ env.S3_BUCKET }} || echo "Warning: S3 bucket access test failed"

      - name: Download Glue Job Artifact
        # if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: glue-job-artifact
          path: ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}

      - name: Extract Artifacts
        #  if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          cd ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
          ls -R
      - name: Deploy Glue Jobs to S3
        #  if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Deploying Glue Jobs to ${{ env.ENVIRONMENT }} environment (Account: ${{ env.ACCOUNT_ID }})"
          aws s3 sync ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}/ s3://${{ env.S3_BUCKET }}/scripts/ --delete

  deploy-to-qa:
    name: Deploy Glue Job to QA
    needs: deploy-to-dev
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' && (github.ref == 'refs/heads/main') }}
    env:
      ENVIRONMENT: qa
    steps:
      - name: Set environment-specific variables
        run: |
          echo "S3_BUCKET=${{ env.S3_BUCKET_ASSETS_QA }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID_QA }}" >> $GITHUB_ENV
          echo "ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID_QA }}:role/${{ env.AWS_ROLE_NAME }}" >> $GITHUB_ENV

      - name: Check if should run
        id: should_run
        run: |
          # For workflow_dispatch, only run for the selected environment
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ inputs.environment }}" == "${{ env.ENVIRONMENT }}" ]; then
              echo "Run this job for ${{ env.ENVIRONMENT }}"
              echo "run=true" >> $GITHUB_OUTPUT
            else
              echo "Skip job for ${{ env.ENVIRONMENT }}"
              echo "run=false" >> $GITHUB_OUTPUT
            fi
          else
            # For automated push to dev/staging, run for all environments
            echo "Run this job for ${{ env.ENVIRONMENT }}"
            echo "run=true" >> $GITHUB_OUTPUT
          fi
      - name: Wait for approval (QA/PRD)
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: benphamdev
          minimum-approvals: 1
          issue-title: "Approval needed for Glue Job deployment to QA"
          issue-body: "Please approve or deny the deployment of Glue Jobs to QA environment."
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 60

      - name: Checkout Repository
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Configure AWS Credentials
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume AWS Role for ${{ env.ENVIRONMENT }}
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: HarmonyGlueDeployment-${{ env.ENVIRONMENT }}
          role-duration-seconds: 3600

      - name: Verify AWS Identity After Role Assumption
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Verifying AWS identity after role assumption"
          aws sts get-caller-identity
          echo "Testing S3 access"
          aws s3 ls ${{ env.S3_BUCKET }} || echo "Warning: S3 bucket access test failed"

      - name: Download Glue Job Artifact
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: glue-job-artifact
          path: ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}

      - name: Extract Artifacts
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          cd ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
          ls -R
      - name: Deploy Glue Jobs to S3
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Deploying Glue Jobs to ${{ env.ENVIRONMENT }} environment (Account: ${{ env.ACCOUNT_ID }})"
          aws s3 sync ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}/ s3://${{ env.S3_BUCKET }}/scripts/ --delete

  deploy-to-prd:
    name: Deploy Glue Job to PRD
    needs: deploy-to-qa
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' && (github.ref == 'refs/heads/main') }}
    env:
      ENVIRONMENT: prd
    steps:
      - name: Set environment-specific variables
        run: |
          echo "S3_BUCKET=${{ env.S3_BUCKET_ASSETS_PRD }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID_PRD }}" >> $GITHUB_ENV
          echo "ROLE_ARN=arn:aws:iam::${{ env.AWS_ACCOUNT_ID_PRD }}:role/${{ env.AWS_ROLE_NAME }}" >> $GITHUB_ENV

      - name: Check if should run
        id: should_run
        run: |
          # For workflow_dispatch, only run for the selected environment
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ inputs.environment }}" == "${{ env.ENVIRONMENT }}" ]; then
              echo "Run this job for ${{ env.ENVIRONMENT }}"
              echo "run=true" >> $GITHUB_OUTPUT
            else
              echo "Skip job for ${{ env.ENVIRONMENT }}"
              echo "run=false" >> $GITHUB_OUTPUT
            fi
          else
            # For automated push to dev/staging, run for all environments
            echo "Run this job for ${{ env.ENVIRONMENT }}"
            echo "run=true" >> $GITHUB_OUTPUT
          fi
      - name: Wait for approval (QA/PRD)
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: benphamdev
          minimum-approvals: 1
          issue-title: "Approval needed for Glue Job deployment to PRD"
          issue-body: "Please approve or deny the deployment of Glue Jobs to PRD environment."
          exclude-workflow-initiator-as-approver: false
          timeout-minutes: 60

      - name: Checkout Repository
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Configure AWS Credentials
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume AWS Role for ${{ env.ENVIRONMENT }}
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: HarmonyGlueDeployment-${{ env.ENVIRONMENT }}
          role-duration-seconds: 3600

      - name: Verify AWS Identity After Role Assumption
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Verifying AWS identity after role assumption"
          aws sts get-caller-identity
          echo "Testing S3 access"
          aws s3 ls ${{ env.S3_BUCKET }} || echo "Warning: S3 bucket access test failed"

      - name: Download Glue Job Artifact
        if: ${{ steps.should_run.outputs.run == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: glue-job-artifact
          path: ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}

      - name: Extract Artifacts
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          cd ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}
          ls -R

      - name: Deploy Glue Jobs to S3
        if: ${{ steps.should_run.outputs.run == 'true' }}
        run: |
          echo "Deploying Glue Jobs to ${{ env.ENVIRONMENT }} environment (Account: ${{ env.ACCOUNT_ID }})"
          aws s3 sync ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}/ s3://${{ env.S3_BUCKET }}/scripts/ --delete
          # Register/update Glue Jobs
          cd ${{ github.workspace }}/${{ env.CODE_SCRIPTS }}/
          # Find all Python script files
          for script in $(find . -name "*.py"); do
            script_name=$(basename "$script" .py)
            script_path="${{ env.S3_BUCKET }}/scripts/${script#./}"
            # Create or update Glue job
            echo "Registering Glue job: $script_name"
            aws glue create-job \
              --name "$script_name-${{ env.ENVIRONMENT }}" \
              --role "AWSGlueServiceRole-${{ env.ENVIRONMENT }}" \
              --command "Name=glueetl,ScriptLocation=$script_path" \
              --max-retries 3 \
              --timeout 60 \
              --glue-version "3.0" \
              --worker-type "G.1X" \
              --number-of-workers 10 \
              --default-arguments '{
                "--enable-metrics": "true",
                "--enable-continuous-cloudwatch-log": "true",
                "--job-language": "python",
                "--environment": "${{ env.ENVIRONMENT }}"
              }' || aws glue update-job \
              --job-name "$script_name-${{ env.ENVIRONMENT }}" \
              --job-update "Command={Name=glueetl,ScriptLocation=$script_path},Role=AWSGlueServiceRole-${{ env.ENVIRONMENT }},MaxRetries=3,Timeout=60,GlueVersion=3.0,WorkerType=G.1X,NumberOfWorkers=10,DefaultArguments={\"--enable-metrics\": \"true\", \"--enable-continuous-cloudwatch-log\": \"true\", \"--job-language\": \"python\", \"--environment\": \"${{ env.ENVIRONMENT }}\"}"
          done
